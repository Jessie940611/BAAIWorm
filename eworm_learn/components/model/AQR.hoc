begintemplate AQR

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: Soma, id: Soma, parent: $s.parent
create Soma
public Soma
// Section: Axon, id: Axon, parent: Soma
create Axon
public Axon
// Section: Dendrite2, id: Dendrite2, parent: Soma
create Dendrite2
public Dendrite2
// Section: Neurite3, id: Neurite3, parent: Axon
create Neurite3
public Neurite3
// Section: Neurite4, id: Neurite4, parent: Axon
create Neurite4
public Neurite4

// Group: {name=soma_group, groups=[], sections=[Soma]}
objref soma_group
// Group: {name=axon_group, groups=[], sections=[Axon]}
objref axon_group
// Group: {name=dendrite_group, groups=[], sections=[Dendrite2, Neurite3, Neurite4]}
objref dendrite_group
// Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}





proc topol() {
    basic_shape()
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)
    connect Neurite3(0), Axon(1.0)
    connect Neurite4(0), Axon(1.0)

}


proc basic_shape() {

    // Section: Soma, id: Soma, parent: $s.parent (entry count 0/100)
    Soma { pt3dclear() }
    Soma { pt3dadd( -14.8, -243.05, 33.95, 2.57682 ) }
    Soma { pt3dadd( -14.8, -240.47318, 33.95, 2.57682 ) }
    // Section: Axon, id: Axon, parent: Soma (entry count 2/100)
    Axon { pt3dclear() }
    Axon { pt3dadd( -14.8, -243.05, 33.95, 0.50990194 ) }
    Axon { pt3dadd( -14.8, -242.15, 33.75, 0.50990194 ) }
    Axon { pt3dadd( -14.8, -241.9, 33.5, 0.48989794 ) }
    Axon { pt3dadd( -14.8, -241.35, 32.85, 0.50990194 ) }
    Axon { pt3dadd( -14.45, -241.30002, 31.7, 0.53851646 ) }
    Axon { pt3dadd( -11.125, -241.54999, 25.400002, 0.4387482 ) }
    Axon { pt3dadd( -6.3, -241.05, 18.35, 0.46904156 ) }
    Axon { pt3dadd( -2.1, -242.3, 15.299999, 0.48989794 ) }
    Axon { pt3dadd( -1.55, -242.95001, 15.299999, 0.50990194 ) }
    Axon { pt3dadd( -1.4499999, -243.95001, 14.775001, 0.55 ) }
    Axon { pt3dadd( -1.4499999, -247.90001, 17.35, 0.42426404 ) }
    Axon { pt3dadd( -1.95, -266.9, 24.95, 0.46904156 ) }
    Axon { pt3dadd( -1.95, -271.25, 30.300001, 0.46904156 ) }
    Axon { pt3dadd( -2.05, -273.05, 36.899998, 0.42426404 ) }
    Axon { pt3dadd( -2.05, -273.05, 37.35, 0.4358899 ) }
    // Section: Dendrite2, id: Dendrite2, parent: Soma (entry count 17/100)
    Dendrite2 { pt3dclear() }
    Dendrite2 { pt3dadd( -14.8, -243.05, 33.95, 0.50990194 ) }
    Dendrite2 { pt3dadd( -14.8, -243.95001, 34.15, 0.50990194 ) }
    Dendrite2 { pt3dadd( -14.8, -245.84999, 34.65, 0.50990194 ) }
    Dendrite2 { pt3dadd( -14.8, -246.0, 34.65, 2.2293496 ) }
    Dendrite2 { pt3dadd( -14.8, -246.09999, 34.65, 2.2293496 ) }
    // Section: Neurite3, id: Neurite3, parent: Axon (entry count 22/100)
    Neurite3 { pt3dclear() }
    Neurite3 { pt3dadd( -2.05, -273.05, 37.35, 0.4358899 ) }
    Neurite3 { pt3dadd( -1.9, -273.075, 37.475, 0.43011624 ) }
    Neurite3 { pt3dadd( 0.65000004, -273.15, 38.125, 0.35000002 ) }
    Neurite3 { pt3dadd( 2.8999999, -273.42502, 39.825, 0.43011624 ) }
    Neurite3 { pt3dadd( 4.475, -273.775, 42.449997, 0.44158804 ) }
    Neurite3 { pt3dadd( 4.975, -274.2, 45.5, 0.42720017 ) }
    Neurite3 { pt3dadd( 4.4500003, -274.65, 48.525, 0.4924429 ) }
    Neurite3 { pt3dadd( 2.8999999, -275.0, 51.1, 0.48989794 ) }
    Neurite3 { pt3dadd( 0.6, -275.3, 52.649998, 0.5 ) }
    Neurite3 { pt3dadd( -1.6750001, -275.4, 53.2, 0.47169906 ) }
    // Section: Neurite4, id: Neurite4, parent: Axon (entry count 32/100)
    Neurite4 { pt3dclear() }
    Neurite4 { pt3dadd( -2.05, -273.05, 37.35, 0.4358899 ) }
    Neurite4 { pt3dadd( -2.2, -273.05, 37.475, 0.33541018 ) }
    Neurite4 { pt3dadd( -4.8500004, -273.15, 38.125, 0.35000002 ) }
    Neurite4 { pt3dadd( -7.125, -273.42502, 39.825, 0.4555217 ) }
    Neurite4 { pt3dadd( -8.7, -273.775, 42.449997, 0.41533118 ) }
    Neurite4 { pt3dadd( -9.2, -274.2, 45.5, 0.4472136 ) }
    Neurite4 { pt3dadd( -8.65, -274.65, 48.525, 0.4924429 ) }
    Neurite4 { pt3dadd( -7.1000004, -275.0, 51.1, 0.48989794 ) }
    Neurite4 { pt3dadd( -4.75, -275.3, 52.649998, 0.50990194 ) }
    Neurite4 { pt3dadd( -2.25, -275.35, 53.2, 0.37416574 ) }

}


proc subsets() { local i

    // Group: {name=soma_group, groups=[], sections=[Soma]}
    soma_group = new SectionList()
    Soma soma_group.append()

    // Group: {name=axon_group, groups=[], sections=[Axon]}
    axon_group = new SectionList()
    Axon axon_group.append()

    // Group: {name=dendrite_group, groups=[], sections=[Dendrite2, Neurite3, Neurite4]}
    dendrite_group = new SectionList()
    Dendrite2 dendrite_group.append()
    Neurite3 dendrite_group.append()
    Neurite4 dendrite_group.append()

    // Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite3, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4, Neurite4]}
	all = new SectionList()
	Soma all.append()
	Axon all.append()
	Dendrite2 all.append()
	Neurite3 all.append()
	Neurite4 all.append()
}


proc subsets_inhomogeneous() {
}

proc biophys() {

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
	Soma nseg = 2
	Axon nseg = 15
	Dendrite2 nseg = 5
	Neurite3 nseg = 10
	Neurite4 nseg = 10
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate AQR


