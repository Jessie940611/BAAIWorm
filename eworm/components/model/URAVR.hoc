begintemplate URAVR

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: Soma, id: Soma, parent: $s.parent
create Soma
public Soma
// Section: Axon, id: Axon, parent: Soma
create Axon
public Axon
// Section: Dendrite2, id: Dendrite2, parent: Soma
create Dendrite2
public Dendrite2

// Group: {name=soma_group, groups=[], sections=[Soma]}
objref soma_group
// Group: {name=axon_group, groups=[], sections=[Axon]}
objref axon_group
// Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
objref dendrite_group
// Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}





proc topol() {
    basic_shape()
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)

}


proc basic_shape() {

    // Section: Soma, id: Soma, parent: $s.parent (entry count 0/100)
    Soma { pt3dclear() }
    Soma { pt3dadd( -4.575, -279.6, 41.4, 2.807134 ) }
    Soma { pt3dadd( -4.575, -276.792866, 41.4, 2.807134 ) }
    // Section: Axon, id: Axon, parent: Soma (entry count 2/100)
    Axon { pt3dclear() }
    Axon { pt3dadd( -4.575, -279.6, 41.4, 0.53851646 ) }
    Axon { pt3dadd( -4.95, -280.5, 41.4, 0.53851646 ) }
    Axon { pt3dadd( -5.25, -281.15, 41.65, 0.4358899 ) }
    Axon { pt3dadd( -6.5499997, -285.80002, 43.45, 0.42426404 ) }
    Axon { pt3dadd( -8.349999, -291.7, 45.3, 0.5 ) }
    Axon { pt3dadd( -9.35, -298.7, 47.05, 0.42426404 ) }
    Axon { pt3dadd( -7.35, -304.80002, 48.55, 0.42426404 ) }
    Axon { pt3dadd( -7.35, -309.5, 50.25, 0.42426404 ) }
    Axon { pt3dadd( -5.5, -329.2, 53.55, 0.5 ) }
    Axon { pt3dadd( -4.5499997, -339.4, 55.35, 0.42426404 ) }
    Axon { pt3dadd( -4.05, -342.7, 55.75, 0.42426404 ) }
    // Section: Dendrite2, id: Dendrite2, parent: Soma (entry count 13/100)
    Dendrite2 { pt3dclear() }
    Dendrite2 { pt3dadd( -4.575, -279.6, 41.4, 0.6 ) }
    Dendrite2 { pt3dadd( -4.2, -278.69998, 41.4, 0.6 ) }
    Dendrite2 { pt3dadd( -4.025, -278.425, 41.25, 0.5244044 ) }
    Dendrite2 { pt3dadd( -3.325, -277.3, 40.05, 0.5408327 ) }
    Dendrite2 { pt3dadd( -2.8999999, -276.475, 39.5, 0.5678908 ) }
    Dendrite2 { pt3dadd( -2.875, -274.0, 38.05, 0.57662815 ) }
    Dendrite2 { pt3dadd( -3.3750002, -273.1, 37.825, 0.552268 ) }
    Dendrite2 { pt3dadd( -5.2999997, -273.2, 38.550003, 0.53851646 ) }
    Dendrite2 { pt3dadd( -6.85, -273.4, 39.8, 0.53851646 ) }
    Dendrite2 { pt3dadd( -7.8500004, -273.5, 41.2, 0.53851646 ) }

}


proc subsets() { local i

    // Group: {name=soma_group, groups=[], sections=[Soma]}
    soma_group = new SectionList()
    Soma soma_group.append()

    // Group: {name=axon_group, groups=[], sections=[Axon]}
    axon_group = new SectionList()
    Axon axon_group.append()

    // Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
    dendrite_group = new SectionList()
    Dendrite2 dendrite_group.append()

    // Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2]}
	all = new SectionList()
	Soma all.append()
	Axon all.append()
	Dendrite2 all.append()
}


proc subsets_inhomogeneous() {
}

proc biophys() {

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
	Soma nseg = 2
	Axon nseg = 11
	Dendrite2 nseg = 10
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate URAVR


