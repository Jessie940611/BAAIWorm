begintemplate AS02

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: Soma, id: Soma, parent: $s.parent
create Soma
public Soma
// Section: Axon, id: Axon, parent: Soma
create Axon
public Axon
// Section: Dendrite2, id: Dendrite2, parent: Soma
create Dendrite2
public Dendrite2

// Group: {name=soma_group, groups=[], sections=[Soma]}
objref soma_group
// Group: {name=axon_group, groups=[], sections=[Axon]}
objref axon_group
// Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
objref dendrite_group
// Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}





proc topol() {
    basic_shape()
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)

}


proc basic_shape() {

    // Section: Soma, id: Soma, parent: $s.parent (entry count 0/100)
    Soma { pt3dclear() }
    Soma { pt3dadd( -1.8750001, -203.875, -12.725, 3.981206 ) }
    Soma { pt3dadd( -1.8750001, -199.893794, -12.725, 3.981206 ) }
    // Section: Axon, id: Axon, parent: Soma (entry count 2/100)
    Axon { pt3dclear() }
    Axon { pt3dadd( -1.8750001, -203.875, -12.725, 0.70710677 ) }
    Axon { pt3dadd( -1.85, -205.04999, -12.0, 0.70710677 ) }
    Axon { pt3dadd( -1.85, -207.04999, -10.7, 0.70710677 ) }
    Axon { pt3dadd( -2.25, -208.59999, -9.6, 0.53851646 ) }
    Axon { pt3dadd( -5.7, -209.25, -9.6, 0.64031243 ) }
    Axon { pt3dadd( -11.325, -209.025, -9.224999, 0.5722762 ) }
    Axon { pt3dadd( -19.575, -206.5, -5.1, 0.7088724 ) }
    Axon { pt3dadd( -23.800001, -202.44998, 1.475, 0.6576473 ) }
    Axon { pt3dadd( -25.625, -198.27501, 8.325, 0.6538348 ) }
    Axon { pt3dadd( -23.800001, -194.05, 15.2, 0.64031243 ) }
    Axon { pt3dadd( -19.575, -190.05, 21.775, 0.717635 ) }
    Axon { pt3dadd( -11.325, -187.55, 25.85, 0.63442886 ) }
    Axon { pt3dadd( -5.7, -187.3, 26.300001, 0.56568545 ) }
    Axon { pt3dadd( -1.65, -188.34999, 26.300001, 0.5830952 ) }
    Axon { pt3dadd( -0.70000005, -190.90001, 27.900002, 0.56568545 ) }
    Axon { pt3dadd( -0.70000005, -205.95, 37.7, 0.5744563 ) }
    Axon { pt3dadd( -0.70000005, -210.75, 40.7, 0.5744563 ) }
    Axon { pt3dadd( -0.70000005, -240.9, 52.499996, 0.56568545 ) }
    Axon { pt3dadd( -0.70000005, -243.8, 53.7, 0.56568545 ) }
    // Section: Dendrite2, id: Dendrite2, parent: Soma (entry count 21/100)
    Dendrite2 { pt3dclear() }
    Dendrite2 { pt3dadd( -1.8750001, -203.875, -12.725, 0.8774964 ) }
    Dendrite2 { pt3dadd( -1.9, -202.7, -13.45, 0.8774964 ) }
    Dendrite2 { pt3dadd( -1.9, -199.95, -15.35, 0.8366601 ) }
    Dendrite2 { pt3dadd( -1.9, -198.05, -16.65, 0.8366601 ) }

}


proc subsets() { local i

    // Group: {name=soma_group, groups=[], sections=[Soma]}
    soma_group = new SectionList()
    Soma soma_group.append()

    // Group: {name=axon_group, groups=[], sections=[Axon]}
    axon_group = new SectionList()
    Axon axon_group.append()

    // Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
    dendrite_group = new SectionList()
    Dendrite2 dendrite_group.append()

    // Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2]}
	all = new SectionList()
	Soma all.append()
	Axon all.append()
	Dendrite2 all.append()
}


proc subsets_inhomogeneous() {
}

proc biophys() {

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
	Soma nseg = 2
	Axon nseg = 19
	Dendrite2 nseg = 4
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate AS02


