begintemplate DB02

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: Soma, id: Soma, parent: $s.parent
create Soma
public Soma
// Section: Axon, id: Axon, parent: Soma
create Axon
public Axon
// Section: Dendrite2, id: Dendrite2, parent: Soma
create Dendrite2
public Dendrite2

// Group: {name=soma_group, groups=[], sections=[Soma]}
objref soma_group
// Group: {name=axon_group, groups=[], sections=[Axon]}
objref axon_group
// Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
objref dendrite_group
// Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}





proc topol() {
    basic_shape()
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)

}


proc basic_shape() {

    // Section: Soma, id: Soma, parent: $s.parent (entry count 0/100)
    Soma { pt3dclear() }
    Soma { pt3dadd( -0.2, -244.5, 15.787, 3.3837848 ) }
    Soma { pt3dadd( -0.2, -241.1162152, 15.787, 3.3837848 ) }
    // Section: Axon, id: Axon, parent: Soma (entry count 2/100)
    Axon { pt3dclear() }
    Axon { pt3dadd( -0.2, -244.5, 15.787, 0.68007356 ) }
    Axon { pt3dadd( 0.4, -245.0, 16.125, 0.68007356 ) }
    Axon { pt3dadd( 0.8, -245.0, 16.1, 0.56568545 ) }
    Axon { pt3dadd( 3.2, -245.025, 15.975, 0.51478153 ) }
    Axon { pt3dadd( 6.9, -244.925, 16.325, 0.6363961 ) }
    Axon { pt3dadd( 14.075, -243.6, 20.3, 0.7088724 ) }
    Axon { pt3dadd( 17.7, -241.45, 26.7, 0.64031243 ) }
    Axon { pt3dadd( 19.3, -239.275, 33.3, 0.60207975 ) }
    Axon { pt3dadd( 17.7, -237.05, 39.975, 0.5024938 ) }
    Axon { pt3dadd( 14.075, -234.95, 46.3, 0.6873864 ) }
    Axon { pt3dadd( 6.875, -233.6, 50.3, 0.8261356 ) }
    Axon { pt3dadd( 3.2, -233.5, 50.7, 0.56568545 ) }
    Axon { pt3dadd( -0.175, -233.25, 49.8, 0.6103278 ) }
    Axon { pt3dadd( -0.7, -231.1, 49.8, 0.6 ) }
    Axon { pt3dadd( -0.7, -210.75, 40.7, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -205.95, 37.7, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -162.75, 9.700001, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -130.35, -8.4, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -114.45, -14.6, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -98.1, -19.5, 0.56568545 ) }
    Axon { pt3dadd( -0.7, -81.3, -22.9, 0.56568545 ) }
    Axon { pt3dadd( -0.7, -77.45001, -22.2, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -47.85, -17.0, 0.5744563 ) }
    Axon { pt3dadd( -0.7, -41.85, -14.3, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 4.05, 6.85, 0.5830952 ) }
    Axon { pt3dadd( -0.7, 11.1, 11.15, 0.53851646 ) }
    Axon { pt3dadd( -0.7, 38.3, 28.05, 0.53851646 ) }
    Axon { pt3dadd( -0.7, 43.05, 29.9, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 88.1, 47.35, 0.53851646 ) }
    Axon { pt3dadd( -0.7, 91.0, 48.5, 0.6 ) }
    Axon { pt3dadd( -0.7, 106.55, 50.5, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 124.1, 53.45, 0.64031243 ) }
    Axon { pt3dadd( -0.7, 128.3, 53.15, 0.64031243 ) }
    Axon { pt3dadd( -0.7, 173.65, 49.9, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 180.35, 48.1, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 223.25, 36.7, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 228.45, 34.5, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 255.65, 22.75, 0.6480741 ) }
    Axon { pt3dadd( -0.7, 259.45, 21.7, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 288.2, 13.4, 0.56568545 ) }
    Axon { pt3dadd( -0.7, 293.55, 12.6, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 321.65, 8.1, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 326.2, 8.1, 0.56568545 ) }
    Axon { pt3dadd( -0.7, 354.45, 8.299999, 0.5744563 ) }
    Axon { pt3dadd( -0.7, 357.1, 8.5, 0.56568545 ) }
    // Section: Dendrite2, id: Dendrite2, parent: Soma (entry count 47/100)
    Dendrite2 { pt3dclear() }
    Dendrite2 { pt3dadd( -0.2, -244.5, 15.787, 0.53851646 ) }
    Dendrite2 { pt3dadd( -0.8, -244.0, 15.45, 0.53851646 ) }
    Dendrite2 { pt3dadd( -0.75, -242.0, 13.9, 0.41231057 ) }
    Dendrite2 { pt3dadd( -1.45, -238.4, 11.25, 0.46904156 ) }
    Dendrite2 { pt3dadd( -1.45, -214.95, -5.25, 0.4358899 ) }
    Dendrite2 { pt3dadd( -1.45, -210.2, -8.4, 0.5 ) }
    Dendrite2 { pt3dadd( -1.45, -167.6, -37.6, 0.5 ) }
    Dendrite2 { pt3dadd( -1.45, -162.85, -40.05, 0.4358899 ) }
    Dendrite2 { pt3dadd( -1.45, -136.95, -53.2, 0.50990194 ) }
    Dendrite2 { pt3dadd( -1.45, -135.45, -53.95, 0.4358899 ) }

}


proc subsets() { local i

    // Group: {name=soma_group, groups=[], sections=[Soma]}
    soma_group = new SectionList()
    Soma soma_group.append()

    // Group: {name=axon_group, groups=[], sections=[Axon]}
    axon_group = new SectionList()
    Axon axon_group.append()

    // Group: {name=dendrite_group, groups=[], sections=[Dendrite2]}
    dendrite_group = new SectionList()
    Dendrite2 dendrite_group.append()

    // Group: {name=all, sections=[Soma, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Axon, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2, Dendrite2]}
	all = new SectionList()
	Soma all.append()
	Axon all.append()
	Dendrite2 all.append()
}


proc subsets_inhomogeneous() {
}

proc biophys() {

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
	Soma nseg = 2
	Axon nseg = 45
	Dendrite2 nseg = 10
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate DB02


